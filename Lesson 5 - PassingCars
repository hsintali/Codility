/* https://app.codility.com/programmers/lessons/5-prefix_sums/passing_cars/ */

/* Approach 1: math + queue
Intuition: 將 0,1 出現的 index 分到 P,Q 兩個 queue。
           P,Q 相乘之後再扣掉 p > q 的所有情況。

Time complexity:  O(n)
Space complexity: O(n)
*/

// you can use includes, for example:
// #include <algorithm>
#include<queue>
// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;

int solution(vector<int> &A) {
    // write your code in C++14 (g++ 6.2.0)
    queue<int> P{}, Q{};
    
    for(int i = 0; i < A.size(); ++i)
    {
        if(A[i] == 0)
        {
            P.push(i);
        }
        else
        {
            Q.push(i);
        }
    }
    
    long long int ans = P.size() * Q.size();
    
    int countLessThanLeft = 0;
    while(!P.empty())
    {
        while(!Q.empty() && P.front() > Q.front())
        {
            Q.pop();
            ++countLessThanLeft;
        }
        ans -= countLessThanLeft;
        P.pop();
    }
    
    return ans > 1000000000 ? - 1 : ans;
}

/* Approach 2:
Intuition: 當遇到 1 的時候，加上目前遇到的 0 的次數。

Time complexity:  O(n)
Space complexity: O(1)
*/

// you can use includes, for example:
// #include <algorithm>

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;

int solution(vector<int> &A) {
    // write your code in C++14 (g++ 6.2.0)
    int zeros = 0;
    long long int ans = 0;
    for(auto a : A)
    {
        if(a == 0) ++zeros;
        else if(a == 1) ans += zeros;
    }
    return ans > 1000000000 ? -1 : ans;
}
