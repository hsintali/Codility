/* https://app.codility.com/programmers/lessons/1-iterations/binary_gap/ */

/* Approach 1:
Intuition:

Time complexity:  O(b) = O(1), b is the # of bits = log(N)/log(10)
Space complexity: O(b) = O(1)
*/

// you can use includes, for example:
// #include <algorithm>

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;

int solution(int N) {
    // write your code in C++14 (g++ 6.2.0)
    int arr[64] = {0};
    int i{};
    
    while(N > 0)
    {
        if(N & 1) arr[i] = 1;
        N >>= 1;
        ++i;
    }
    
    int start = 64;
    int max = 0;
    for(int i = 0; i < 64; ++i)
    {
        if(arr[i] == 1)
        {
            if((i - start - 1) > max) max = i - start - 1;
            start = i;
        }
    }
    
    return max;
}

/* Approach 2:
Intuition:

Time complexity:  O(b) = O(1), b is the # of bits = log(N)/log(10)
Space complexity: O(1)
*/

// you can use includes, for example:
// #include <algorithm>

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;

int solution(int N) {
    // write your code in C++14 (g++ 6.2.0)
    int count{};
    int ans{};
    bool isFindOne{};
    
    while(N > 0)
    {
        if(N & 1)
        {
            isFindOne = true;
            count = 0;
        }
        else
        {
            ++count;
        }
        
        if(isFindOne) ans = max(ans, count);
        
        N >>= 1;
    }
    
    return ans;
}
